                                             POO: POLIMORFISMO

 O polimorfismo é um conceito fundamental na Programação Orientada a Objetos (POO) que se refere à capacidade de 
um objeto assumir diferentes formas. Em termos simples, o polimorfismo permite que uma única interface seja usada 
para diferentes tipos de dados. Essa característica torna o código mais flexível e extensível, pois você pode 
escrever funções ou métodos que podem trabalhar com diferentes tipos de objetos de maneira uniforme.

 Imagine que você está em uma aula de artes e tem uma ferramenta chamada “pincel”. Esse pincel pode ser usado para 
pintar de várias maneiras: você pode fazer uma linha fina, uma linha grossa, pode usar diferentes cores, ou até 
mesmo criar texturas diferentes. Mesmo sendo o mesmo pincel, ele pode se comportar de maneiras variadas, 
dependendo de como você o usa. No mundo da programação, o polimorfismo funciona de maneira semelhante.

 Em POO, o polimorfismo permite que você use um método ou uma função de várias maneiras diferentes, dependendo do 
contexto. Isso quer dizer que você pode ter uma única interface (como um método com o mesmo nome) que pode ser 
usada para diferentes tipos de objetos. Por exemplo, imagine que você tenha um método chamado “desenhar”. Esse 
método pode ser utilizado para desenhar um círculo, um quadrado, ou um triângulo. Mesmo que o nome do método seja 
o mesmo, o comportamento dele será diferente dependendo do objeto com o qual está lidando.

 Isso é muito útil porque permite que você escreva código mais flexível e reutilizável. Em vez de ter que escrever 
um novo método para cada tipo de objeto, você pode usar o mesmo método e confiar que o comportamento correto será 
executado, dependendo do tipo de objeto em questão.

 Além disso, o polimorfismo facilita a extensão e a manutenção do código. Como você pode criar novas classes que 
usam métodos já existentes de maneiras novas, é mais fácil adicionar funcionalidades ao seu programa sem precisar 
modificar o código existente.

 O polimorfismo é como se fosse uma mágica que torna a programação orientada a objetos poderosa e versátil. Ele 
permite que os objetos se adaptem ao contexto em que são usados, proporcionando flexibilidade e facilitando a 
criação de sistemas complexos e escaláveis.



                                      "Tipos de Polimorfismo"

 Os tipos de polimorfismo são formas diferentes de implementar e utilizar o conceito de polimorfismo na 
Programação Orientada a Objetos. Cada tipo de polimorfismo descreve uma maneira específica de permitir que o mesmo 
nome ou operador tenha diferentes comportamentos. Em essência, os tipos de polimorfismo definem como a 
flexibilidade e a capacidade de adaptação do código são alcançadas e aplicadas.

 Os tipos mais comuns de polimorfismo são:

 - Polimorfismo de Sobrecarga (Overloading): O polimorfismo de sobrecarga acontece quando várias funções ou 
  métodos têm o mesmo nome, mas com diferentes assinaturas. A assinatura de uma função inclui o nome, o número e o 
  tipo dos parâmetros. Isso permite que a mesma função seja usada para realizar operações semelhantes em 
  diferentes contextos. A escolha de qual versão da função chamar é feita com base na combinação de parâmetros 
  fornecidos. Esse tipo de polimorfismo facilita a criação de funções que realizam tarefas semelhantes mas com 
  entradas diferentes.

     Características:

	Múltiplas Definições: Permite que um método ou operador tenha várias definições na mesma classe, com base 
                             em diferentes assinaturas.

	Assinaturas Diferentes: Cada definição deve ter um número diferente ou um tipo diferente de parâmetros.

	Resolução em Tempo de Compilação: A seleção da definição correta ocorre durante a compilação, com base nos 
                                         argumentos fornecidos na chamada do método.

     Exemplo: Em uma classe 'Calculadora', você pode ter um método 'soma' que aceita dois inteiros como 	    
             parâmetros, e outro soma que aceita três inteiros. Ambos os métodos têm o mesmo nome, mas comportam-
             se de maneira diferente com base nos parâmetros fornecidos.


 - Polimorfismo de Sobrescrita (Overriding): O polimorfismo de sobrescrita ocorre quando uma classe filha fornece 
  uma implementação específica para um método que já foi definido na classe pai. Embora a classe filha tenha o 
  mesmo nome de método, a implementação é ajustada para atender às necessidades específicas da classe filha. Isso 
  permite que um objeto da classe filha execute uma versão personalizada de um método que é comum na hierarquia de 
  herança. A decisão sobre qual versão do método usar é feita em tempo de execução, baseada no tipo do objeto que 
  invoca o método.

     Características:

	Redefinição em Subclasse: Permite que uma subclasse forneça uma nova implementação para um método que já 
                                 foi definido na superclasse.

	Mesma Assinatura: A nova implementação deve ter a mesma assinatura que a original (mesmo nome, tipo e 
                         número de parâmetros).

	Resolução em Tempo de Execução: A escolha da implementação correta é feita durante a execução, com base no 
                                       tipo real do objeto.

     Exemplo: Se uma classe Animal tem um método 'fazerSom', e uma subclasse Cachorro sobrescreve esse método para 
             que 'fazerSom' retorne "latido" em vez de "som de animal", então o método 'fazerSom' se comportará de 
             maneira diferente dependendo do tipo de objeto (Cachorro ou outro animal).


 - Polimorfismo Paramétrico: O polimorfismo paramétrico permite que funções ou métodos sejam definidos com tipos 
  genéricos, que podem ser especificados quando a função ou método é chamado. Isso significa que o mesmo código 
  pode operar em diferentes tipos de dados sem precisar ser reescrito para cada tipo. Esse tipo de polimorfismo é 
  frequentemente utilizado em linguagens de programação que suportam generics, onde você pode escrever funções ou 
  classes que funcionam com qualquer tipo de dado, fornecendo a flexibilidade de usar diferentes tipos sem 
  duplicar o código.
      
     Características:

	Generalização por Tipo: Permite que métodos e classes trabalhem com diferentes tipos de dados, que são 
                               especificados como parâmetros.

	Implementação Única: A mesma implementação pode ser usada para diferentes tipos, sem duplicação de código.

	Resolução em Tempo de Compilação: O tipo específico é resolvido durante a compilação, garantindo segurança 
                                         de tipo.

     Exemplo: Uma classe 'Lista<T> pode ser usada para criar uma lista de qualquer tipo de dado, como 
             'Lista<Integer>' ou 'Lista<String>', permitindo que o mesmo código funcione com diferentes tipos de 
             dados.


 - Polimorfismo por Inclusão (Subtype Polymorphism): O polimorfismo por inclusão, também conhecido como 
  polimorfismo de subtipo, ocorre quando uma instância de uma classe filha pode ser usada onde uma instância da 
  classe mãe é esperada. Isso é possível porque a classe filha herda ou implementa todos os métodos e atributos da   
  classe mãe, possuindo assim um comportamento compatível. Esse tipo de polimorfismo é fundamental para a herança 
  e permite que objetos de diferentes subclasses sejam tratados de maneira uniforme, promovendo a flexibilidade no 
  uso de objetos e métodos.
 
     Características:

	Herança e Substituição: Permite que uma instância de uma subclasse seja tratada como uma instância da 
                               superclasse.

        Métodos da Superclasse: Métodos que aceitam a superclasse como parâmetro podem operar com qualquer 
                               subclasse.

        Resolução em Tempo de Execução: A decisão sobre qual método chamar é feita com base no tipo real do objeto 
                                       durante a execução.

     Exemplo: Se 'Animal' é uma superclasse e 'Cachorro' e 'Gato' são subclasses, uma variável do tipo 'Animal' 
             pode referenciar um objeto de qualquer uma dessas subclasses, permitindo o uso de métodos comuns 
             definidos na superclasse.


 - Polimorfismo Coercivo (Coercion Polymorphism): O polimorfismo coercivo é quando uma operação pode aceitar 
  diferentes tipos de dados, e o sistema converte automaticamente entre eles quando necessário. Isso ocorre 
  geralmente quando você usa um tipo de dado em um contexto onde outro tipo é esperado, e o sistema faz a 
  conversão automática para permitir a operação. Esse tipo de polimorfismo é útil para a compatibilidade entre 
  tipos diferentes, mas é importante para garantir que a conversão não afete a precisão ou o comportamento 
  esperado do programa.

     Características:

	Conversão Automática: Permite a conversão automática entre tipos de dados compatíveis.

	Tratamento Intercambiável: Diferentes tipos de dados podem ser tratados de maneira intercambiável em 
                                  contextos específicos.

	Resolução em Tempo de Compilação: A conversão é geralmente decidida durante a compilação.

     Exemplo: Em algumas linguagens, ao somar um número inteiro com um número de ponto flutuante, o inteiro é 
             automaticamente convertido para um ponto flutuante para que a operação possa ser realizada.


 - Polimorfismo de Ad-hoc: O polimorfismo de ad-hoc permite que uma função ou operação tenha diferentes 
  comportamentos dependendo dos tipos de dados fornecidos, mas sem a necessidade de definir diferentes versões da 
  função. Isso é frequentemente alcançado através da sobrecarga de operadores ou métodos específicos que se 
  adaptam a diferentes tipos de dados ou estruturas. Esse tipo de polimorfismo oferece flexibilidade na definição 
  de operações que podem ser aplicadas a diferentes tipos de dados de forma natural e intuitiva.

     Características:

	Comportamento Variado: Permite que métodos ou operadores tenham comportamentos variados dependendo dos 
                              tipos dos argumentos fornecidos.

        Sobrecarga e Outras Técnicas: Pode ser implementado através da sobrecarga de métodos ou operadores, ou por 
                                     outros mecanismos que ajustam o comportamento com base no contexto.

        Resolução em Tempo de Compilação ou Execução: Dependendo da implementação, a resolução pode ocorrer em 
                                                     tempo de compilação ou em tempo de execução.

    Exemplo: Funções de comparação como 'equals' podem ser implementadas de maneiras diferentes para diferentes 
            tipos de objetos (e.g., comparar inteiros vs. comparar strings), mas todas têm o mesmo nome.

 Esses tipos de polimorfismo permitem que programadores escrevam código mais flexível e reutilizável, facilitando 
a manutenção e a evolução dos sistemas ao longo do tempo. Cada tipo de polimorfismo oferece diferentes formas de 
abstrair e generalizar o comportamento dos objetos, tornando a POO uma abordagem poderosa no desenvolvimento de 
software.


"OBS: O que é assinatura de um método?

 A assinatura de um método é o conjunto de informações que identifica      unicamente o método dentro de uma  
classe ou interface. 

  Ela inclui:

               Nome do Método: O nome pelo qual o método é chamado.
               
	       Número e Tipo de Parâmetros: Os tipos e a ordem dos parâmetros que o método aceita.

  A assinatura não inclui o tipo de retorno do método. Em outras palavras, métodos com o mesmo nome e parâmetros 
 diferentes (ou número de parâmetros) têm assinaturas diferentes, enquanto métodos com a mesma assinatura, mas 
 tipos de retorno diferentes, são considerados como tendo a mesma assinatura."



                                   "Conclusão sobre Polimorfismo"

 O polimorfismo é um conceito fundamental na programação orientada a objetos que permite que objetos de diferentes 
classes sejam tratados de maneira uniforme por meio de uma interface comum. Ele se baseia na ideia de que uma 
única interface pode ser usada para representar diferentes tipos de objetos, possibilitando que métodos sejam 
chamados de forma genérica, sem precisar conhecer os detalhes específicos de cada tipo de objeto. Isso promove 
flexibilidade e extensibilidade no código, facilitando a manutenção e a evolução dos sistemas.

 Uma característica chave do polimorfismo é a capacidade de métodos em diferentes classes responderem a chamadas 
de maneira específica para cada tipo de objeto. Isso significa que o mesmo método pode se comportar de maneira 
diferente dependendo do objeto que o invoca. Essa característica é alcançada por meio da sobrecarga e sobrescrita 
de métodos, que permitem definir e implementar comportamentos variados enquanto se mantém a mesma interface para 
os métodos chamados.

 Em resumo, o polimorfismo é uma poderosa ferramenta que melhora a reutilização e a modularidade do código. Ele 
permite que o mesmo código funcione com diferentes tipos de objetos, simplificando a escrita de código mais geral 
e extensível. Essa abordagem não apenas melhora a clareza e a organização do código, mas também facilita a 
implementação de novos comportamentos sem a necessidade de modificar o código existente, promovendo a robustez e a 
flexibilidade do sistema.