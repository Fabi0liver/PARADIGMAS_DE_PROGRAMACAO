                                  PARADIGMAS DE PROGRAÇÃO DECLARATIVO


 O paradigma de programação declarativo é uma abordagem de desenvolvimento de software onde o foco principal é 
descrever o que se deseja alcançar, sem precisar especificar em detalhes como isso deve ser feito. Em vez de 
detalhar uma sequência de passos para a execução de uma tarefa, como ocorre em outros paradigmas, o programador 
apenas define o objetivo final ou o resultado esperado. O sistema ou linguagem usada é então responsável por 
descobrir e executar os passos necessários para alcançar esse resultado.

 Esse paradigma é especialmente útil quando o problema a ser resolvido pode ser claramente descrito em termos de 
resultados ou estados desejados, sem a necessidade de se preocupar com os processos detalhados que acontecem nos 
bastidores. Por exemplo, em uma consulta a um banco de dados, o programador pode simplesmente dizer "quero todos 
os registros onde a idade seja maior que 30", e o sistema se encarrega de descobrir como recuperar esses registros 
da maneira mais eficiente possível.

 O surgimento do paradigma declarativo está intimamente ligado à evolução da computação e à busca por maneiras 
mais eficientes e intuitivas de programar, especialmente à medida que os problemas se tornavam mais complexos. Nos 
anos 1950, LISP (List Processing) foi uma das primeiras linguagens a incorporar elementos declarativos, 
particularmente no campo da programação funcional. LISP foi projetada para lidar com dados simbólicos e 
manipulação de listas, sendo usada inicialmente em inteligência artificial. Sua abordagem, ao invés de focar em 
instruções passo a passo, permitia que o programador se concentrasse em descrever transformações de dados.

 Nos anos 1970, o paradigma declarativo ganhou força com o desenvolvimento de Prolog (Programação em Lógica), uma 
linguagem criada para programação lógica. Prolog introduziu a ideia de definir relações e regras, permitindo ao 
programador expressar o conhecimento de um domínio através de fatos e regras lógicas. O programa então, usando um 
motor de inferência, determinava a solução de um problema ao explorar essas regras, sem que o programador 
precisasse especificar a ordem exata de execução das instruções. Isso representou um grande avanço na 
simplificação da lógica de programação para problemas complexos.

 Outro marco importante foi a criação do SQL (Structured Query Language) para bancos de dados relacionais, que 
exemplifica claramente o paradigma declarativo. Com SQL, o programador descreve o que deseja obter de um banco de 
dados — como selecionar certos dados com base em condições específicas — sem se preocupar em como esses dados 
serão obtidos, ou seja, a implementação exata da consulta é deixada a cargo do sistema de gerenciamento de banco 
de dados.

 Além dessas, o paradigma declarativo influenciou o desenvolvimento de outras linguagens e tecnologias, como as 
usadas em sistemas de configuração e automação (por exemplo, Ansible, Puppet), onde se descrevem estados desejados 
de sistemas e não os comandos necessários para atingir esses estados.

 Em resumo, o paradigma declarativo se trata de expressar intenções e objetivos, deixando a execução e a lógica 
subjacente para o sistema interpretar e resolver da melhor maneira possível. Esse estilo de programação é 
especialmente útil em ambientes onde a descrição do objetivo pode ser feita de forma clara e onde há um motor de 
execução capaz de determinar a melhor forma de atingir esse objetivo com base em regras e lógicas pré-definidas. 
Isso faz do paradigma declarativo uma escolha poderosa para certos tipos de problemas, onde a complexidade da 
implementação pode ser abstraída, permitindo ao programador focar na solução em um nível mais alto de abstração.

 Uma analogia para entender o paradigma declarativo é compará-lo a fazer um pedido em um restaurante. Imagine que 
você vai a um restaurante e deseja uma refeição. Em um estilo imperativo, você entraria na cozinha e diria ao chef 
exatamente como preparar cada ingrediente, quais utensílios usar, e em que ordem fazer cada passo. Isso exige que 
você tenha conhecimento detalhado do processo de cozinha e monitore cada etapa. Já em um estilo declarativo, você 
simplesmente escolhe o prato no cardápio e informa o chef. Você descreve o que quer (por exemplo, "um bife bem 
passado com batatas"), e o chef, usando sua expertise, decide como preparar o prato para você, sem que você 
precise se envolver nos detalhes. O foco é no resultado final, e não nos passos para alcançá-lo.



                "Linguagens de Programação que usam o Paradigma Declarativo"

 Linguagens que utilizam o paradigma declarativo são projetadas para permitir que os programadores expressem o que 
desejam alcançar, em vez de especificar os passos detalhados para chegar a esse resultado. Nesse modelo, o foco 
está na descrição do problema e na definição dos objetivos desejados, enquanto o sistema subjacente é responsável 
por determinar a melhor forma de executar essas instruções. Isso simplifica o processo de programação ao abstrair 
a complexidade da implementação, permitindo que os desenvolvedores se concentrem mais na lógica e nos resultados 
esperados do programa.

 Vou detalhar um pouco mais sobre cada uma dessas linguagens, enfatizando como elas se alinham ao paradigma declarativo:

 - Prolog: É uma linguagem de programação lógica, utilizada principalmente em inteligência artificial e resolução 
  de problemas baseados em regras. Em Prolog, você define fatos e regras lógicas e faz consultas para inferir 
  novas informações. A execução é baseada na resolução lógica dos fatos declarados, o que torna a linguagem   
  declarativa. O programador especifica o "o que" deve ser verdadeiro, e o mecanismo de inferência de Prolog deduz 
  "como" isso pode ser verdadeiro.

 - Erlang: É uma linguagem projetada para sistemas distribuídos e tolerantes a falhas, com forte suporte para  
  concorrência. Em Erlang, o modelo de atores permite que processos concorrentes se comuniquem por troca de 
  mensagens, sem compartilhar estado. Isso elimina a necessidade de programação imperativa complexa para 
  sincronização de threads, focando mais no "o que" os processos devem fazer e "quais" mensagens devem trocar, sem 
  se preocupar com os detalhes de implementação de concorrência.

 - MATLAB: É uma linguagem e ambiente de programação voltado para cálculos numéricos, simulações e visualizações 
  gráficas. MATLAB permite que você descreva operações matemáticas de alto nível de forma declarativa. Por 
  exemplo, ao manipular matrizes ou realizar operações algébricas, você não precisa se preocupar com os detalhes 
  de implementação; o MATLAB interpreta as operações e as executa de maneira eficiente.

 - Lisp: É uma família de linguagens de programação com uma longa história, frequentemente usada para pesquisa em 
  inteligência artificial. Embora Lisp suporte tanto paradigmas imperativos quanto declarativos, sua capacidade de 
  tratar código como dados (metaprogramação) permite um estilo declarativo onde você pode definir regras e 
  manipular expressões de maneira abstrata. Dialetos como Clojure enfatizam o uso de funções puras e 
  imutabilidade, promovendo o estilo declarativo.

 - SQL (Structured Query Language): É uma linguagem padrão para gerenciar e manipular bancos de dados  
  relacionais. SQL é declarativo porque, ao consultar um banco de dados, você especifica "o que" deseja obter, 
  como selecionar colunas de uma tabela ou combinar dados de várias tabelas, sem precisar detalhar "como" o 
  sistema deve realizar essas operações. O sistema de gerenciamento de banco de dados (SGBD) cuida da execução 
  interna das consultas.

 - HTML (HyperText Markup Language): É a linguagem padrão para criar e estruturar páginas na web. HTML é 
  declarativo porque você define a estrutura do conteúdo (por exemplo, que um trecho de texto é um parágrafo, ou 
  que uma imagem deve ser exibida) sem se preocupar com a execução de como esse conteúdo será exibido. O navegador 
  interpreta as tags HTML e renderiza o conteúdo conforme especificado.

 - CSS (Cascading Style Sheets): É uma linguagem usada para descrever a aparência e o layout de documentos HTML. 
  CSS é declarativo porque você define regras de estilo que descrevem como os elementos da página devem ser 
  apresentados. Você especifica "o que" quer que aconteça (por exemplo, que todos os títulos tenham uma cor azul), 
  mas não "como" o navegador deve processar essa informação.

 Essas linguagens exemplificam como o paradigma declarativo pode ser aplicado em diferentes domínios, permitindo 
que o programador se concentre mais na lógica e na intenção do código, deixando os detalhes da execução para as 
ferramentas e ambientes de tempo de execução.



                      "Principais Características do Paradigma Declarativo"

 O paradigma declarativo é um estilo de programação onde o foco está na descrição do que se deseja alcançar, em 
vez de detalhar como alcançar o resultado. 

 Aqui estão as principais características desse paradigma:

 - Descrição do Problema: No paradigma declarativo, você especifica o que deseja obter ou realizar sem descrever 
  como o sistema deve realizar a tarefa. Em vez de fornecer um conjunto de instruções passo a passo, você define 
  as condições e restrições que devem ser satisfeitas. Isso permite que o sistema determine o melhor caminho para 
  alcançar o objetivo definido.

 - Abstração da Implementação: O paradigma declarativo abstrai os detalhes da implementação, focando mais na 
  lógica de alto nível do problema. O programador não precisa se preocupar com a mecânica interna do processo de 
  execução. Em vez disso, o sistema subjacente cuida da execução, otimizando e gerenciando os recursos necessários 
  para satisfazer as condições declaradas.

 - Uso de Regras e Fatos: Em muitas linguagens declarativas, especialmente em programação lógica, você define 
  fatos e regras. Fatos são declarações sobre o estado do sistema, enquanto regras descrevem como novos fatos  
  podem ser derivados a partir dos existentes. A execução do programa envolve a inferência desses fatos e regras 
  para responder a consultas ou resolver problemas.

 - Consultas e Expressões: O paradigma declarativo frequentemente utiliza consultas e expressões para interagir 
  com o sistema. Em vez de executar comandos imperativos, o programador formula consultas que o sistema interpreta 
  e executa. Isso é comum em linguagens de consulta como SQL, onde você especifica o que deseja recuperar de um 
  banco de dados, sem detalhar como a recuperação deve ser realizada.

 - Imutabilidade e Funções Puras: Em alguns paradigmas declarativos, como a programação funcional, a ênfase está 
  na imutabilidade e no uso de funções puras. Funções puras não têm efeitos colaterais e sempre retornam o mesmo 
  resultado para os mesmos argumentos. Isso permite uma abordagem mais declarativa, onde o foco está na definição 
  das operações e na transformação de dados, sem se preocupar com mudanças de estado.

 - Lógica e Constrangimentos: Linguagens declarativas muitas vezes expressam a lógica do programa em termos de 
  constrangimentos ou restrições. Por exemplo, em programação lógica, você define um conjunto de restrições que 
  descrevem o problema e permite que o sistema encontre soluções que atendam a essas restrições. Isso diferencia o 
  paradigma declarativo da programação imperativa, onde o controle de fluxo é explicitamente gerenciado.

 - Orientação à Declaração de Resultados: O paradigma declarativo se orienta para a declaração dos resultados 
  esperados em vez de se preocupar com o processo para alcançá-los. O programador define claramente qual é o 
  objetivo ou resultado desejado, e o sistema se encarrega de trabalhar internamente para atingir esse resultado 
  da maneira mais eficiente possível.

 Essas características destacam a abordagem declarativa de programação, que visa simplificar o desenvolvimento ao 
permitir que os programadores descrevam o que querem alcançar sem se preocupar com os detalhes específicos de como 
isso deve ser realizado
 
