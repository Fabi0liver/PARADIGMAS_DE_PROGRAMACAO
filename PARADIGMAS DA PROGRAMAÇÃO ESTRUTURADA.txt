                                  PARADIGMA DE PROGRAMAÇÃO ESTRUTURADA

  
 O paradigma de programação estruturada é uma metodologia de desenvolvimento de software que promove a criação de 
programas mais legíveis, organizados e fáceis de manter, através do uso de estruturas de controle bem definidas. Esse paradigma se baseia na ideia de que o código deve ser escrito de maneira clara e linear, evitando o uso 
excessivo de desvios incontrolados, como o comando "goto", que era comum nos primeiros dias da programação.

 O paradigma estruturado surgiu na década de 1960, durante um período de rápido crescimento e evolução na área de 
informática. Naquela época, a programação era frequentemente realizada em linguagens de baixo nível, e o uso 
indiscriminado de saltos e desvios (como o comando "goto") resultava em código desorganizado, difícil de entender e manter, um fenômeno que ficou conhecido como "código espaguete". Esse tipo de código era extremamente problemático, pois qualquer modificação ou correção tornava-se um desafio significativo, aumentando o risco de introduzir novos erros no sistema.
  
 Um marco importante para o surgimento da programação estruturada foi a publicação do artigo "Go To Statement 
Considered Harmful" por Edsger W. Dijkstra em 1968. Nesse artigo, Dijkstra argumentava que o uso excessivo do 
"goto" criava programas desordenados e que uma abordagem mais disciplinada, usando estruturas de controle bem 
definidas, resultaria em código mais robusto e compreensível.

 A partir desse ponto, a ideia de estruturar o código de forma a seguir um fluxo lógico e previsível ganhou 
popularidade. Foram introduzidos conceitos como sequência (execução linear de instruções), seleção (decisões 
condicionais) e repetição (loops), que formam a base do paradigma estruturado. Esse novo enfoque não apenas 
melhorou a clareza dos programas, mas também facilitou a manutenção, a depuração e a evolução do software.

 Com o tempo, a programação estruturada tornou-se amplamente aceita e incorporada em diversas linguagens de 
programação, como C, Pascal e Ada, que oferecem suporte direto a esses princípios. Essas linguagens fornecem 
estruturas de controle que evitam a necessidade de comandos "goto", permitindo que os desenvolvedores escrevam 
código de forma mais lógica e modular.



                                "Relação com o Paradigma Imperativo"

 O paradigma de programação estruturada pode ser visto como uma evolução ou especialização do paradigma 
imperativo. Ele toma os princípios básicos da programação imperativa — manipulação de estado e controle de fluxo — 
e os organiza em um conjunto de práticas que tornam o código mais claro, mais fácil de manter e menos propenso a 
erros. Dessa forma, a programação estruturada é uma aplicação disciplinada da programação imperativa, que visa 
melhorar a qualidade do software desenvolvido.

 Enquanto o paradigma imperativo define o conceito geral de como escrever programas que instruem o computador, o paradigma estruturado adiciona um conjunto de restrições e boas práticas que ajudam a organizar o código de maneira mais clara e gerenciável.

  Detalhando Ligação entre os dois paradigmas:

- Fluxo de Controle: Ambos os paradigmas utilizam estruturas de controle, como loops e condicionais, para      
                    determinar o fluxo de execução do programa. No entanto, a programação estruturada organiza 
                    essas estruturas de forma a evitar o "goto" indiscriminado, promovendo um fluxo de controle 
                    mais previsível e linear, o que é uma característica aprimorada do paradigma imperativo.

- Modularidade: A programação estruturada enfatiza a divisão do código em subrotinas, funções ou procedimentos, o  
               que não é uma exigência no paradigma imperativo, mas uma prática recomendada. Essa modularidade 
               permite que programas imperativos sejam organizados de maneira mais clara e lógica.

- Clareza e Manutenibilidade: Enquanto o paradigma imperativo permite a criação de código em qualquer forma que 
                             siga a sequência lógica, o paradigma estruturado exige que o código seja escrito de 
                             forma mais legível e organizada. Isso melhora a clareza e facilita a manutenção, dois 
                             objetivos que surgem da necessidade prática de trabalhar com programas imperativos 
                             complexos.

- Abstração do Fluxo de Controle: No paradigma imperativo, o programador pode controlar o fluxo de execução de 
                                 forma muito granular. O paradigma estruturado, por sua vez, abstrai esse controle 
                                 em estruturas pré-definidas como "if-else", "while" e "for", que ajudam a evitar 
                                 a complexidade associada ao controle de fluxo manual, como o uso excessivo de 
                                 "goto".




               "Principais Características do Paradigma de Programação Estruturada"


 O paradigma de programação estruturada possui várias características que o diferencia e o torna essencial para a criação de programas claros e bem organizados.

 Abaixo estão as principais características desse paradigma:

- Sequência Lógica de Instruções: Refere-se à execução linear e ordenada das instruções de um programa. Em um 
programa estruturado, as instruções são processadas uma após a outra na ordem em que aparecem no código, a menos 
que sejam alteradas por estruturas de controle (como loops ou condicionais).

   Características:

	Execução Linear: As instruções são executadas em uma sequência direta, do início ao fim do bloco de 
                        código, sem desvios inesperados.

	Fluxo Previsível: A execução linear proporciona um fluxo de controle previsível e fácil de seguir, o que   
                         ajuda a entender a lógica do programa e a depurar erros.

	Facilidade de Compreensão: A estrutura linear torna o código mais fácil de ler e compreender, pois o 
                                  programador pode seguir o fluxo de execução do topo ao fundo, sem ter que lidar  
                                  com saltos complexos.

        Organização: Facilita a organização do código, pois cada instrução ou bloco de código é executado em uma 
                    ordem definida, o que ajuda a manter a lógica do programa clara e estruturada.
 
 Em resumo, a sequência lógica de instruções é a base da execução ordenada e previsível de um programa, contribuindo para a clareza, organização e manutenção eficiente do código.


- Uso de Estruturas de Controle Bem Definidas: São mecanismos que permitem alterar o fluxo de execução de um 
programa com base em condições ou repetições. Elas são fundamentais para a implementação de lógica condicional e  
repetitiva de maneira estruturada e organizada.

   Tipos de Estruturas de Controle:
	
	- Condicionais:

		'if': Permite executar um bloco de código apenas se uma condição for verdadeira.
		         Exemplo: 'if (idade >= 18) { // Código para adultos }'

		'else': Define um bloco de código a ser executado se a condição if for falsa.
			  Exemplo: 'else { // Código para menores de 18 anos }'

		'else if': Permite testar múltiplas condições em sequência.
			  Exemplo: 'else if (idade < 13) { // Código para crianças }'


	- Laços de Repetição:

		'for': Executa um bloco de código um número específico de vezes. Ideal para iterações conhecidas.
				Exemplo: 'for (int i = 0; i < 10; i++) { // Código a ser repetido 10 vezes }'

		'while': Executa um bloco de código enquanto uma condição for verdadeira. Ideal para iterações   
                        desconhecidas.
                 Exemplo: 'while (contador < 10) { // Código a ser repetido enquanto a condição for verdadeira }'

		'do-while': Semelhante ao while, mas garante que o bloco de código seja executado pelo menos uma 
                           vez, pois a condição é verificada após a execução.

                            Exemplo: Aninhamento de loops e condicionais para implementar lógicas complexas.

	
   Características:

	Clareza e Ordem: Estruturas de controle proporcionam uma maneira clara e ordenada de gerenciar o fluxo de 
                        execução do programa, substituindo o uso desorganizado de comandos "goto".

        Controle do Fluxo de Execução: Permitem que o programa tome decisões (com base em condições) e repita 
                                      operações (baseado em condições de repetição), o que é essencial para a                   
                                      implementação de lógica programática.

	Evita Desvios Incontrolados: Ao evitar o uso de comandos "goto", as estruturas de controle garantem que o 
                                    fluxo de execução seja mais previsível e compreensível.

	Modularidade e Reutilização: Facilitam a criação de código modular, onde blocos de código podem ser 
                                    reutilizados em diferentes contextos, melhorando a organização e a eficiência.

 Em resumo, o uso de estruturas de controle bem definidas é fundamental para criar programas estruturados e 
lógicos, permitindo uma gestão clara e eficiente do fluxo de execução e a implementação de lógica condicional e 
repetitiva.


- Modularidade: É uma característica crucial do paradigma de programação estruturada, que visa tornar o desenvolvimento e a manutenção do software mais eficientes.Modularidade é o princípio de dividir um programa em partes menores e independentes, chamadas de módulos, funções, procedimentos ou subrotinas. Cada módulo é responsável por uma parte específica da funcionalidade do programa.

   Características:

	Divisão em Módulos: O código é organizado em módulos distintos, onde cada módulo realiza uma tarefa 
                           específica ou um conjunto de tarefas relacionadas.
                            
                           Benefício: Facilita o entendimento e a gestão do código, pois cada módulo pode ser 
                           compreendido e desenvolvido de forma isolada.

	Encapsulamento: Cada módulo encapsula suas próprias funcionalidades e dados, expondo apenas o que é 
                       necessário para o resto do programa.

		       Benefício: Protege a integridade dos dados e reduz a dependência entre módulos, tornando o 
                       sistema mais robusto e fácil de manter.

	Reutilização de Código: Funções e módulos podem ser reutilizados em diferentes partes do programa ou em  
                               diferentes projetos.

			       Benefício: Reduz a duplicação de código, economiza tempo e esforço, e garante 
                               consistência na aplicação da lógica.

	Reutilização de Código: Funções e módulos podem ser reutilizados em diferentes partes do programa ou em 
                               diferentes projetos.

                               Benefício: Reduz a duplicação de código, economiza tempo e esforço, e garante 
                               consistência na aplicação da lógica.

	Isolamento de Problemas: Problemas podem ser isolados e corrigidos dentro do módulo específico, sem afetar 
                                outras partes do programa.

				Benefício: Facilita a depuração e manutenção, pois permite a identificação e 
                                correção de erros em um módulo sem alterar o restante do código.

	Facilidade de Testes: Módulos podem ser testados de forma independente para garantir que funcionem 
                             corretamente antes de serem integrados ao programa principal.

                             Benefício: Melhora a confiabilidade do software, pois permite a identificação precoce 
                             de falhas e a verificação de funcionalidades de maneira isolada.

	Organização e Estrutura: A modularidade promove uma organização clara do código, com uma estrutura bem 
                                definida que reflete a divisão de responsabilidades.

				Benefício: Torna o código mais fácil de ler e entender, facilitando a colaboração 
                                entre desenvolvedores e a manutenção do sistema.

 Em resumo, a modularidade é uma característica essencial da programação estruturada que promove a organização, reutilização e manutenção eficiente do código, contribuindo para a criação de sistemas robustos e flexíveis.
